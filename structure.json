{
  "..": {
    "backend_gerencia": {
      "src": {
        "controllers": {
          "eventosController.ts": "import { Request, Response } from \"express\";\r\nimport eventoDAO from \"../dao/eventoDAO\";\r\nimport Result from \"../utils/Result\";\r\nimport { Event, EventoCreationResult } from \"../interface/interfazEvento\";\r\n\r\nclass eventosController {\r\n\tpublic async insertEvent(req: Request, res: Response) {\r\n\t\tconst { nombre_evento, descripcion_evento, organizador_evento, lugar_evento, fecha_evento, hora_evento, valor_evento, id_usuario, id_lugar } = req.body;\r\n\r\n\t\t// Validación de tipos de datos\r\n\t\tconst fieldsToValidate = [\r\n\t\t\t{ name: \"nombre_evento\", value: nombre_evento, type: \"string\" },\r\n\t\t\t{ name: \"descripcion_evento\", value: descripcion_evento, type: \"string\" },\r\n\t\t\t{ name: \"organizador_evento\", value: organizador_evento, type: \"string\" },\r\n\t\t\t{ name: \"lugar_evento\", value: lugar_evento, type: \"string\" },\r\n\t\t\t{ name: \"fecha_evento\", value: fecha_evento, type: \"string\" },\r\n\t\t\t{ name: \"hora_evento\", value: hora_evento, type: \"string\" },\r\n\t\t\t{ name: \"valor_evento\", value: valor_evento, type: \"number\" },\r\n\t\t\t{ name: \"id_usuario\", value: id_usuario, type: \"string\" },\r\n\t\t\t{ name: \"id_lugar\", value: id_lugar, type: \"string\" },\r\n\t\t];\r\n\r\n\t\tconst invalidField = fieldsToValidate.find(\r\n\t\t\t({ value, type }) => typeof value !== type\r\n\t\t);\r\n\r\n\t\tif (invalidField) {\r\n\t\t\treturn res\r\n\t\t\t\t.status(400)\r\n\t\t\t\t.json(\r\n\t\t\t\t\t`Error: Tipo de dato incorrecto para el campo ${invalidField.name}`\r\n\t\t\t\t);\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tconst data = { nombre_evento, descripcion_evento, organizador_evento, lugar_evento, fecha_evento, hora_evento, valor_evento, id_usuario, id_lugar };\r\n\r\n\t\t\tconst result: Result<EventoCreationResult, string> = await eventoDAO.createEvent(data);\r\n\t\t\tif (result.isSuccess) {\r\n\t\t\t\treturn res.status(200).json(result.getValue());\r\n\t\t\t} else {\r\n\t\t\t\treturn res.status(400).json({ error: result.errorValue() });\r\n\t\t\t}\r\n\t\t} catch (error: any) {\r\n\t\t\tconsole.error(`Error al crear el evento: ${error.message}`);\r\n\t\t\treturn res.status(500).json(`Error al crear el evento: ${error.message}`);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic async fetchEvent(req: Request, res: Response) {\r\n\t\tconst id_evento: number = parseInt(req.params.id_evento);\r\n\r\n\t\tif (isNaN(id_evento)) {\r\n\t\t\treturn res.status(400).json(\"Invalid data type for field id_evento\");\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tconst result: Result<Event, string> = await eventoDAO.getEvent(id_evento);\r\n\t\t\tif (result.isSuccess) {\r\n\t\t\t\treturn res.status(200).json(result.getValue());\r\n\t\t\t} else {\r\n\t\t\t\treturn res.status(400).json({ error: result.errorValue() });\r\n\t\t\t}\r\n\t\t} catch (error: any) {\r\n\t\t\treturn res\r\n\t\t\t\t.status(500)\r\n\t\t\t\t.json(`Error al obtener el evento: ${error.message}`);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic async fetchAllEvents(req: Request, res: Response) {\r\n\t\ttry {\r\n\t\t\tconst result = await eventoDAO.getEvents();\r\n\t\t\tif (result.isSuccess) {\r\n\t\t\t\treturn res.status(200).json(result.getValue());\r\n\t\t\t} else {\r\n\t\t\t\treturn res.status(400).json({ error: result.errorValue() });\r\n\t\t\t}\r\n\t\t} catch (error: any) {\r\n\t\t\treturn res\r\n\t\t\t\t.status(500)\r\n\t\t\t\t.json(`Error al obtener los eventos: ${error.message}`);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic async updateEvent(req: Request, res: Response) {\r\n\t\tconst id_evento = parseInt(req.params.id_evento);\r\n\r\n\t\tif (isNaN(id_evento)) {\r\n\t\t\treturn res.status(400).json({ error: \"El id_evento debe ser un número válido.\" });\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tconst eventoData = req.body;\r\n\t\t\tconst eventoActualizado = await eventoDAO.updateEvent(id_evento, eventoData);\r\n\t\t\t\r\n\t\t\tif (eventoActualizado.isSuccess) {\r\n\t\t\t\treturn res.status(200).json(eventoActualizado.getValue());\r\n\t\t\t} else {\r\n\t\t\t\treturn res.status(400).json({ error: eventoActualizado.errorValue() });\r\n\t\t\t}\r\n\t\t} catch (error: any) {\r\n\t\t\tconsole.error(`Error al actualizar el evento: ${error.message}`);\r\n\t\t\treturn res.status(500).json({ error: \"Error al actualizar el evento\" });\r\n\t\t}\r\n\t}\r\n}\r\n\r\nconst EventoController = new eventosController();\r\nexport default EventoController;\r\n"
        },
        "dao": {
          "eventoDAO.ts": "import { pool } from \"../config/connection/conexion\";\r\nimport { SQL_EVENTOS } from \"../repository/crudSQL\";\r\nimport Result from \"../utils/Result\";\r\nimport { Event, EventoCreationResult } from \"../interface/interfazEvento\";\r\n\r\nexport default class eventoDAO {\r\n\tpublic static async createEvent(\r\n\t\tdata: Omit<Event, \"id_evento\">\r\n\t): Promise<Result<EventoCreationResult>> {\r\n\t\ttry {\r\n\t\t\tconst existingEvent = await pool.oneOrNone(\r\n\t\t\t\tSQL_EVENTOS.checkIfEventExists,\r\n\t\t\t\t[data.nombre_evento, data.fecha_evento, data.hora_evento]\r\n\t\t\t);\r\n\r\n\t\t\tif (existingEvent) {\r\n\t\t\t\treturn Result.fail(\r\n\t\t\t\t\t`Ya existe un evento con el nombre \"${data.nombre_evento}\" en la fecha y hora especificada.`\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\tconst result = await this.insertEvent(data);\r\n\t\t\treturn result;\r\n\t\t} catch (error: any) {\r\n\t\t\tconsole.error(\r\n\t\t\t\t`Error al verificar existencia de evento: ${error.message}`\r\n\t\t\t);\r\n\t\t\treturn Result.fail(`No se puede crear el evento: ${error.message}`);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate static async insertEvent(\r\n\t\tdata: Omit<Event, \"id_evento\">\r\n\t): Promise<Result<EventoCreationResult>> {\r\n\t\ttry {\r\n\t\t\tconst result: EventoCreationResult = await pool.one(\r\n\t\t\t\tSQL_EVENTOS.addNewEvent,\r\n\t\t\t\t[\r\n\t\t\t\t\tdata.nombre_evento,\r\n\t\t\t\t\tdata.descripcion_evento,\r\n\t\t\t\t\tdata.organizador_evento,\r\n\t\t\t\t\tdata.lugar_evento,\r\n\t\t\t\t\tdata.fecha_evento,\r\n\t\t\t\t\tdata.hora_evento,\r\n\t\t\t\t\tdata.valor_evento,\r\n\t\t\t\t\tdata.id_usuario,\r\n\t\t\t\t\tdata.id_lugar,\r\n\t\t\t\t]\r\n\t\t\t);\r\n\t\t\treturn Result.success({ id_evento: result.id_evento });\r\n\t\t} catch (error: any) {\r\n\t\t\tconsole.error(\r\n\t\t\t\t`Error al insertar evento en la base de datos: ${error.message}`\r\n\t\t\t);\r\n\t\t\treturn Result.fail(`No se puede crear el evento: ${error.message}`);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static async getEvent(id_evento: number): Promise<Result<Event>> {\r\n\t\ttry {\r\n\t\t\tconst result: Event | null = await pool.oneOrNone(SQL_EVENTOS.getEvent, [\r\n\t\t\t\tid_evento,\r\n\t\t\t]);\r\n\r\n\t\t\tif (!result) {\r\n\t\t\t\treturn Result.fail(`El evento con id_evento ${id_evento} no existe.`);\r\n\t\t\t}\r\n\r\n\t\t\treturn Result.success(result);\r\n\t\t} catch (error: any) {\r\n\t\t\tconsole.error(`Error al obtener el evento: ${error.message}`);\r\n\t\t\treturn Result.fail(`No se puede obtener el evento, ${error.message}`);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static async getEvents(): Promise<Result<Event[]>> {\r\n\t\ttry {\r\n\t\t\tconst result: Event[] = await pool.manyOrNone(SQL_EVENTOS.getAllEvents);\r\n\r\n\t\t\tif (!result || result.length === 0) {\r\n\t\t\t\treturn Result.fail(\"No hay eventos disponibles.\");\r\n\t\t\t}\r\n\r\n\t\t\treturn Result.success(result);\r\n\t\t} catch (error: any) {\r\n\t\t\tconsole.error(`Error al obtener los eventos: ${error.message}`);\r\n\t\t\treturn Result.fail(`No se pueden obtener los eventos, ${error.message}`);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static async updateEvent(id_evento: number, data: Event) {\r\n\t\ttry {\r\n\t\t\tconst { nombre_evento, descripcion_evento, organizador_evento, lugar_evento, fecha_evento, hora_evento, valor_evento, id_usuario, id_lugar } = data;\r\n\t\t\tconst result = await pool.oneOrNone(SQL_EVENTOS.editEvent, [\r\n\t\t\t\tid_evento,\r\n\t\t\t\tnombre_evento,\r\n\t\t\t\tdescripcion_evento,\r\n\t\t\t\torganizador_evento,\r\n\t\t\t\tlugar_evento,\r\n\t\t\t\tfecha_evento,\r\n\t\t\t\thora_evento,\r\n\t\t\t\tvalor_evento,\r\n\t\t\t\tid_usuario,\r\n\t\t\t\tid_lugar,\r\n\t\t\t]);\r\n\t\t\treturn Result.success(result);\r\n\t\t} catch (error: any) {\r\n\t\t\tconsole.error(`Error al actualizar el evento: ${error.message}`);\r\n\t\t\treturn Result.fail(`No se puede actualizar el evento, ${error.message}`);\r\n\t\t}\r\n\t}\r\n}\r\n"
        },
        "repository": {
          "crudSQL.ts": "export const SQL_TOKEN = {\r\n\tgetUserToken: `\r\n\t  SELECT \r\n\t\t\tuser_id,\r\n\t\t\tusername, \r\n\t\t\trol \r\n\t  FROM users \r\n\t  WHERE username = $1 AND password = $2;`,\r\n\r\n\tgetUserCredentials: `\r\n\t\tSELECT \r\n\t\t\tpassword \r\n\t\tFROM users \r\n\t\tWHERE username = $1;`,\r\n};\r\n\r\nexport const SQL_USUARIO = {\r\n\tfetchUser: `\r\n\t\tSELECT \r\n\t\t\tuser_id, nombre, apellido, \r\n\t\t\temail, username, rol, \r\n\t\t\tcreated_at, updated_at\r\n\t\tFROM users \r\n\t\tWHERE users.username = $1;`,\r\n\r\n\tfindAllUsers: `\r\n\t\tSELECT \r\n\t\t\tusers.nombre, users.apellido, users.username, \r\n\t\t\troles.nombre_rol as rol\r\n\t\tFROM users \r\n\t\tJOIN roles ON users.rol = roles.id_rol;`,\r\n\r\n\tinsertUser: `\r\n\t\tWITH new_user AS (\r\n\t\t\tINSERT INTO users (nombre, apellido, email, username, password, rol, created_at)\r\n\t\t\tVALUES ($1, $2, $3, $4, $5, $6::rol_enum, CURRENT_TIMESTAMP)\r\n\t\t\tRETURNING user_id\r\n\t\t)\r\n\t\t\t\r\n\t\tINSERT INTO perfiles (username, avatar_url, user_id)\r\n\t\t\tVALUES ($4, '', (SELECT user_id FROM new_user))\r\n\t\tRETURNING id;`,\r\n\r\n\tcheckUserExists: `\r\n\t\tSELECT \r\n\t\t\tuser_id \r\n\t\tFROM users \r\n\t\tWHERE email = $1 OR username = $2;`,\r\n\r\n\tupdateUserPassword: `\r\n\t\tUPDATE users\r\n\t\tSET password = $1, updated_at = CURRENT_TIMESTAMP\r\n\t\tWHERE username = $2\r\n\t\tRETURNING user_id;`,\r\n};\r\n\r\nexport const SQL_EVENTOS = {\r\n\taddNewEvent: `\r\n\t\tINSERT INTO eventos (\r\n\t\t\tnombre_evento, \r\n\t\t\tdescripcion_evento, \r\n\t\t\torganizador_evento, \r\n\t\t\tlugar_evento, \r\n\t\t\tfecha_evento, \r\n\t\t\thora_evento, \r\n\t\t\tvalor_evento,\r\n\t\t\tid_usuario,\r\n\t\t\tid_lugar\r\n\t\t) values ($1, $2, $3, $4, $5, $6, $7, $8, $9)\r\n\t\treturning id_evento;`,\r\n\r\n\tcheckIfEventExists: `\r\n\t\tSELECT \r\n\t\t\tid_evento \r\n\t\tFROM eventos \r\n\t\tWHERE nombre_evento = $1 \r\n\t\t\tAND fecha_evento = $2 \r\n\t\t\tAND hora_evento = $3;`,\r\n\r\n\tgetEvent: `\r\n\t\tSELECT \r\n\t\t\tid_evento, \r\n\t\t\tnombre_evento, \r\n\t\t\tdescripcion_evento, \r\n\t\t\torganizador_evento, \r\n\t\t\tlugar_evento, \r\n\t\t\tfecha_evento, \r\n\t\t\thora_evento, \r\n\t\t\tvalor_evento, \r\n\t\t\tid_usuario, \r\n\t\t\tid_lugar\r\n\t\tFROM eventos\r\n\t\tWHERE id_evento = $1;`,\r\n\r\n\tgetAllEvents: `\r\n\t\tSELECT \r\n\t\t\tid_evento, nombre_evento, descripcion_evento, \r\n\t\t\torganizador_evento, lugar_evento, fecha_evento, \r\n\t\t\thora_evento, valor_evento, id_usuario, id_lugar\r\n\t\tFROM eventos;`,\r\n\r\n\teditEvent: `\r\n\t\tUPDATE eventos \r\n\t\tSET nombre_evento = $2, \r\n\t\t\t\tdescripcion_evento = $3, \r\n\t\t\t\torganizador_evento = $4, \r\n\t\t\t\tlugar_evento = $5, \r\n\t\t\t\tfecha_evento = $6, \r\n\t\t\t\thora_evento = $7, \r\n\t\t\t\tvalor_evento = $8, \r\n\t\t\t\tid_usuario = $9, \r\n\t\t\t\tid_lugar = $10 \r\n\t\tWHERE id_evento = $1;`,\r\n};\r\n\r\nexport const SQL_LUGARES = {\r\n\taddNewLugar: `\r\n\t\tINSERT INTO lugares (\r\n\t\t\tnombreLugar, \r\n\t\t\tdireccionLugar, \r\n\t\t\taforoTotalLugar\r\n\t\t) VALUES ($1, $2, $3)\r\n\t\t RETURNING id_lugar;`,\r\n\r\n\tcheckLugarExists: `\r\n\t\tSELECT\r\n\t\t\tid_lugar\r\n\t\tFROM lugares\r\n\t\tWHERE nombreLugar = $1\r\n\t\t\tAND direccionLugar = $2\r\n\t\t\tAND aforoTotalLugar = $3;`,\r\n\r\n\tgetLugar: `\r\n\t\tSELECT \r\n\t\t\tid_lugar, \r\n\t\t\tnombreLugar, \r\n\t\t\tdireccionLugar, \r\n\t\t\taforoTotalLugar \r\n\t\tFROM lugares \r\n\t\tWHERE nombreLugar = $1;`,\r\n\r\n\tgetAllLugares: `\r\n\t\tSELECT \r\n\t\t\tid_lugar, \r\n\t\t\tnombreLugar, \r\n\t\t\tdireccionLugar, \r\n\t\t\taforoTotalLugar \r\n\t\tFROM lugares;`,\r\n\r\n\tupdateLugar: `\r\n\t\tUPDATE lugares \r\n\t\tSET nombreLugar = $2, \r\n\t\t\t\tdireccionLugar = $3, \r\n\t\t\t\taforoTotalLugar = $4 \r\n\t\tWHERE id_lugar = $1;`,\r\n\r\n\tdeleteLugar: `\r\n\t\tDELETE FROM lugares \r\n\t\tWHERE id_lugar = $1;`,\r\n};\r\n\r\nexport const SQL_PERFILES = {\r\n\tfetchUserProfile: `\r\n\t\tSELECT\r\n\t\t\tu.user_id,\r\n\t\t\tp.username,\r\n\t\t\tp.avatar_url,\r\n\t\t\tu.nombre,\r\n\t\t\tu.apellido,\r\n\t\t\tu.email,\r\n\t\t\tu.rol\r\n\t\tFROM\r\n\t\t\tperfiles p\r\n\t\t\tINNER JOIN users u on p.user_id = u.user_id\r\n\t\tWHERE u.username = $1 AND p.username = $1;`,\r\n\r\n\t\taddUrlImage: `\r\n\t\tUPDATE perfiles\r\n\t\t\tSET avatar_url = $2\r\n\t\tWHERE username = $1;`\r\n};"
        },
        "routes": {
          "rutasEventos.ts": "import { Router } from \"express\";\r\n\r\nimport EventoController from \"../controllers/eventosController\";\r\nimport cacheMiddleware from \"../middleware/Cache\";\r\n\r\nclass Rutas {\r\n\tpublic rutasApi: Router;\r\n\r\n\tconstructor() {\r\n\t\tthis.rutasApi = Router();\r\n\t\tthis.config();\r\n\t}\r\n\r\n\tpublic config() {\r\n\t\tthis.rutas();\r\n\t}\r\n\tpublic rutas() {\r\n\t\t// /api/v1/public/eventos\r\n\t\tthis.rutasApi.post(\"/\", EventoController.insertEvent);\r\n\t\tthis.rutasApi.get(\"/\", EventoController.fetchAllEvents);\r\n\t\tthis.rutasApi.get(\"/:id_evento\", EventoController.fetchEvent);\r\n\t\tthis.rutasApi.put(\"/:id_evento\", EventoController.updateEvent);\r\n\t}\r\n}\r\n\r\nconst misRutas = new Rutas();\r\nexport default misRutas.rutasApi;\r\n"
        }
      }
    }
  }
}